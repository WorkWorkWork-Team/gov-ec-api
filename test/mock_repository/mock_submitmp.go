// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/submitmp.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubmitMpRepository is a mock of SubmitMpRepository interface.
type MockSubmitMpRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmitMpRepositoryMockRecorder
}

// MockSubmitMpRepositoryMockRecorder is the mock recorder for MockSubmitMpRepository.
type MockSubmitMpRepositoryMockRecorder struct {
	mock *MockSubmitMpRepository
}

// NewMockSubmitMpRepository creates a new mock instance.
func NewMockSubmitMpRepository(ctrl *gomock.Controller) *MockSubmitMpRepository {
	mock := &MockSubmitMpRepository{ctrl: ctrl}
	mock.recorder = &MockSubmitMpRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmitMpRepository) EXPECT() *MockSubmitMpRepositoryMockRecorder {
	return m.recorder
}

// SubmitMpToDB mocks base method.
func (m *MockSubmitMpRepository) SubmitMpToDB(citizenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMpToDB", citizenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitMpToDB indicates an expected call of SubmitMpToDB.
func (mr *MockSubmitMpRepositoryMockRecorder) SubmitMpToDB(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMpToDB", reflect.TypeOf((*MockSubmitMpRepository)(nil).SubmitMpToDB), citizenID)
}
