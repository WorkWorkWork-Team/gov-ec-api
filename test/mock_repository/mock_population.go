// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/population.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/WorkWorkWork-Team/gov-ec-api/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPopulationRepository is a mock of PopulationRepository interface.
type MockPopulationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPopulationRepositoryMockRecorder
}

// MockPopulationRepositoryMockRecorder is the mock recorder for MockPopulationRepository.
type MockPopulationRepositoryMockRecorder struct {
	mock *MockPopulationRepository
}

// NewMockPopulationRepository creates a new mock instance.
func NewMockPopulationRepository(ctrl *gomock.Controller) *MockPopulationRepository {
	mock := &MockPopulationRepository{ctrl: ctrl}
	mock.recorder = &MockPopulationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPopulationRepository) EXPECT() *MockPopulationRepositoryMockRecorder {
	return m.recorder
}

// CheckIfPeopleExists mocks base method.
func (m *MockPopulationRepository) CheckIfPeopleExists(citizenID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPeopleExists", citizenID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfPeopleExists indicates an expected call of CheckIfPeopleExists.
func (mr *MockPopulationRepositoryMockRecorder) CheckIfPeopleExists(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPeopleExists", reflect.TypeOf((*MockPopulationRepository)(nil).CheckIfPeopleExists), citizenID)
}

// QueryAllCandidate mocks base method.
func (m *MockPopulationRepository) QueryAllCandidate() ([]model.PopulationDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllCandidate")
	ret0, _ := ret[0].([]model.PopulationDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllCandidate indicates an expected call of QueryAllCandidate.
func (mr *MockPopulationRepositoryMockRecorder) QueryAllCandidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllCandidate", reflect.TypeOf((*MockPopulationRepository)(nil).QueryAllCandidate))
}

// QueryAllDistrict mocks base method.
func (m *MockPopulationRepository) QueryAllDistrict() ([]model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllDistrict")
	ret0, _ := ret[0].([]model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllDistrict indicates an expected call of QueryAllDistrict.
func (mr *MockPopulationRepositoryMockRecorder) QueryAllDistrict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllDistrict", reflect.TypeOf((*MockPopulationRepository)(nil).QueryAllDistrict))
}

// QueryCandidateByDistrict mocks base method.
func (m *MockPopulationRepository) QueryCandidateByDistrict(districtId int) ([]model.PopulationDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCandidateByDistrict", districtId)
	ret0, _ := ret[0].([]model.PopulationDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCandidateByDistrict indicates an expected call of QueryCandidateByDistrict.
func (mr *MockPopulationRepositoryMockRecorder) QueryCandidateByDistrict(districtId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCandidateByDistrict", reflect.TypeOf((*MockPopulationRepository)(nil).QueryCandidateByDistrict), districtId)
}

// QueryPeopleCommitedTheVote mocks base method.
func (m *MockPopulationRepository) QueryPeopleCommitedTheVote(districtId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPeopleCommitedTheVote", districtId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPeopleCommitedTheVote indicates an expected call of QueryPeopleCommitedTheVote.
func (mr *MockPopulationRepositoryMockRecorder) QueryPeopleCommitedTheVote(districtId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPeopleCommitedTheVote", reflect.TypeOf((*MockPopulationRepository)(nil).QueryPeopleCommitedTheVote), districtId)
}

// QueryPeopleRightToVote mocks base method.
func (m *MockPopulationRepository) QueryPeopleRightToVote(districtId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPeopleRightToVote", districtId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPeopleRightToVote indicates an expected call of QueryPeopleRightToVote.
func (mr *MockPopulationRepositoryMockRecorder) QueryPeopleRightToVote(districtId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPeopleRightToVote", reflect.TypeOf((*MockPopulationRepository)(nil).QueryPeopleRightToVote), districtId)
}

// QueryTotalPopulation mocks base method.
func (m *MockPopulationRepository) QueryTotalPopulation(districtId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTotalPopulation", districtId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTotalPopulation indicates an expected call of QueryTotalPopulation.
func (mr *MockPopulationRepositoryMockRecorder) QueryTotalPopulation(districtId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTotalPopulation", reflect.TypeOf((*MockPopulationRepository)(nil).QueryTotalPopulation), districtId)
}
